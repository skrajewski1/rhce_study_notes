Title: RHCE Exam Notes
Date: 2-27-2025
Author: Sean Krajewski


## Table of Contents 
1. [Note to Reader](#overview)
2. [Resources](#stuff I used to study)
3. RHEL Basics (#a lot of this is RHCSA review)
4. Red Hat System Administration



1. Note to Reader 

These are my personal notes I used for studying for Red Hat Certified Engineer (RHCE) exam (EX294).  
I decided to keep with the running theme of documenting my notes on GitHub.
This isn't meant to be 100% thorough.  RHCE has more advanced networking, security, and introduces automation.
I would say it's a entry point into DevOps concepts in a practical sense.
There is about 20 question on the exam and you need a passing score of 210/300 (70%). No multiple-choice questions!
My experience and those I've talked to that have done the RHCSA to RHCE is to do focus on getting the RHCE as soon as possible.
If you know how to use Ansible you will have a big advantage.  A lot of the RHCE is based on automation via Ansible playbooks.
Again, use my notes if it helps. I'm using Luca Berton's book (see below) as my main study source.



2. Resources

https://www.redhat.com/en/services/certification/rhce
Luca Berton's Mastering the Red Hat Certified Engineer (RHCE) Exam



3. RHEL Basics

lifecycle of RHEL:  full support(5yr), maintenance support (5yr), extended life cycle support (ELS) add-on

Benefits of RHEL:
CPU architectures supported: 86x, ARM, IBM Power, IBM Z, IBM LinuxONE
RHEL includes Ansible automation tech
Red Hat insights provides analytics/remediation  = suppose to maximize uptime and avoid emergencies
Migration tools + RHEL image builder for cloud deployments
live kernel patching, security profiles, trusted software supply chain, automate security processes
performance monitoring/analysis tools
Convert2RHEl tool streamlines the migration process from RPM compatible linux distros like Rocky Linux, AlmaLinux OS, etc
various use cases: edge computing, hybrid cloud deployments, SAP workloads, SQL server hosting, applicaiton development, and high-performance computing (HPC)
Collaborations with cloud providers like GPC, AWS, Azure, Oracle


RHEL installer is called Anaconda  (same for CentOS and Fedora)




### subscription manager

subscription-manager register --username=<name> --password=<pw>

#see available subscriptions
suscription-manager list --available | less

#attach subscription 
subscription-manager attach --auto

#unregister the system
subscription-manager unregister


###shutting down commands

you generally want to limit shutdowns/downtime.  instead try restarting (covered in next section)

#shutdown and restart now 
shutdown -r now

#schedule shutdown at 23:00
shutdown --halt 23:00

#shutdown in 2 minutes
shutdown --halt +2

#shutdown in 2 minutes with a message broadcasted to users logged in
shudown --halt +2 "Urgent. Shudown in TWO minutes."

#cancel shutdown  (this will also be broadcasted to users logged in)
shutdown -c


### Reboot

limitation of systemctl is its inability to do delayed restarts (either now or never)

#restart a service
systemctl restart <service name>

#restart the system (same as effect as shutdown -r now)
systemctl reboot


### Suspending and hibernating

suspension
+ system shuts down (no-power mode)
+ contents of memory are moved to the swap location. on powerup, system reloads from swap
+ boot loader is configured to boot directly to the current kernel

systemctl suspend


hibernation
+ the ystem remains powered on but in a low-power state
+ applications are stopped
+ system state is moved to ram

systemctl hibernate

#combines both
systemctl hybrid-sleep


#Graphical user interface

default gui in RHEL is the GNOME environment.


#Bash scripts 

best used for repetitive or complex tasks (helps reduce human error and improve user experience)

#!/bin/Bash
#Usage: Hello World Bash Shell scripts
#Author: Sean Krajewski
echo "Hello World!"


#Man command

best used in air-gapped environments or exams!

#lists all man pages with descriptions
man -k 


#short description for specific command
man -f <command>

#search all man pages using regulare experessions and open matching ones
man --regex <keyword>

#narrow search to specific section 
man -s <section ID> <keyword>

#searching all man pages for a keyword and out location
man -wK <keyword>



## Red Hat support tool

redhat-support-tool is a utility that provides text based interface for searching inside the knowledge base articles
and filing support cases on the customer portal via command LinuxONE

search option = search between red hat articles
opencase option = open a support cases
addattachment option = attach diagnostic sys info (sosreport)
listcases = list the supported cases of our red hat customer account

# red hat insights

software as service (SaaS) which identifies/remdiates threats, performance, and stability on systems or infrastructures 
running red hat products.
you have to opt-in and requires an agent running.
when a security threat is identified a solution (step-by-step instructions) to remediate the porblem is provided or an ansible playbook
insights is already installed on RedHat +8 systems

to start it use 
you can then audit systems for compliance using the penSCAP policy framework project e.g. auditing for PCI DSS policy


insights-client --register

#users and groups

Linux is a multi-user system. gotta know how to enforce security and access control on users/groups

use su or sudo for switching to users
you may have to use a password for the user 

su mike   (swiches user to mike)

sudo is used for privilege escalation and is only allowed if the user is in a special group i.e. wheel
you can also add the user directly in the file visudo e.g. mike ALL=(ALL) ALL
if you edit the visudo file or add user to the wheel group and run whoami it will show up as them being 'root'

#storage

/ directory is the root. everything falls under it.

/boot  =  files for system bootstrap
/etc   =  config files
/dev   =  files to access hardware
/home  =  home dirs of users (has their personal data)
/root  =  home dir for root
/usr   =  installed software, shared libraries, includes some key files
/usr/bin  = user commands
/usr/sbin = system admin commands
/usr/local = locally customized software
/var   =  dynamically chaning data i.e. log files, cache dirs, databases, printer spooled documents, website contents
/run   =  runtime data for processes started since the lat boot.  includes process id files and lock files (recreated at boot)
/tmp   =  world writable space for temporary files. files not changed in 10 days are auto deleted!!! (/var/tmp is 30 days!!)


#partitioning

crucial part of sys admin
division of hard drives into logical storage units as partitions enables space to be allocated functions to certain areas
e.g. memory swap space
Master Boot Record (MBR) partitioning scheme used since 1982, process of how to partition on BIOS firmware systems (it supported 4 partitions/disk)
GUID partition table (GPT) has succeeded MBR. it offers 128 partitions per disk, larger disk sizes, redundancy with primary/secondary GPTs
GPT is the standard now for Unified Extensible Firmware Interface (UEFI) firmware systems

parted /dev/sda     (launches the GNU parted interactive mode for managing partitions)

example:

[root@localhost ~]# parted /dev/sda
GNU Parted 3.5
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sda: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  1075MB  1074MB  primary  xfs          boot
 2      1075MB  21.5GB  20.4GB  primary               lvm


the print command displays the partition table

you may have used fdisk to partition the hard drive.  fdisk works primarily with MBR and is meant for older or smaller systems.
fdisk is good for simple partitioning
gdisk can be used but you have to install it.  gdisk works better for GPT
parted works better for larger disk >2TB; it's better for modern systems, scripting, automated partitioning

XFS and .ext4 are commonly used for file systems types

#apply a file system to a partition after it's created
mkfs.xfs /dev/sdb1

#manually mounting sda1 to mount point /mnt/data
mount /dev/sda1 /mnt/data

you can also use the UUID (universally unique identifier)


storage devices will be identified by the connection interface via:
/dev/sda  = SCSI
/dev/hda  = IDE 
/dev/nvme0 = NVMe 

#to unmount  (can only do it if its not in use)
umount /mnt/data

#provides a list of resources active for each file system, adding in resolving unmounting challenges
lsof


#Persistent mount
/etc/fstab   (critical for persistent mounting)


best practice is to use UUIDs for devices to vaide potential issues with changing block device identifiers

#reload the systemd after making changes to /etc/fstab
systemctl daemon-reload

#check if there are errors with your /etc/fstab; can also use mount -a and if it fails something is wrong
findmnt --verify

##Installing software

use dnf to install packages.  Yum was and can still be used but dnf is an improved version of yum.
dnf installs not just the software you want but any dependencies that are needed as well.

#list installed packages
dnf list

#search packages matching keywords
dnf search <keyword>

#update all installed packages + kernel updates (essential for maintaining system security)
dnf update

it's a good practice to reboot after updating the kernel


#update only the httpd package
dnf update httpd

#log file of dnf packages installed and removed 
/var/log/dnf.rpm.log

#shows the history of the dnf environments
dnf history

#undo an action from the history just use the ID from from the dnf history list
dnf history <ID>

##web console
web user interface (WUI) introduced via cockpit; it allows admins to connect and manage a system accessing the web interface at a specified address
cockpit service  must be configured to run on the system in order to connect

systemctl status cockpit.socket         (verify status of the service)
systemctl start cockpit                 (starts the cockpit service)
semanage port -a -t websm_port_t -p tcp 9090
firewall-cmd --permanent --service cockpit --add-port=9090/tcp

##SSH network login
ssh user@ipaddress
ssh user@hostname

#using a public key  (key has to have 0600 permission!!)
ssh -i mykey.pem user@ipaddress

#exiting ssh
ctrl + d 

Remote host fingerprint is stored in ~/.ssh/known_hosts
you can generate keys with the following command

ssh-keygen
-t   = type of algo
-b   = number of Bits  
-f   = file name

default configs are RSA 2048 Benefits
For FIPS 186-2 DSA keys must be exactly 1024bits

public key is saved in ~/.ssh/id_rsa.pub 
private key is saved in ~/.ssh/id_rsa         (SHA 256)

#copies pbulic key of the ssh public keyy to the remote system
ssh-copy-id -i .ssh/id_rsa.pub  user@ipaddress

ssh-copy-id command copies the public key and puts it in the ~/.ssh/authorized_keys dir

# you can use ssh-agent to cache the ssh private key in memory at the beginning or during our seesion to have passwordless authentication

eval "$(ssh-agent -s)"        (start the ssh-agent; will output agent pid)
ssh-add ~/.ssh/id_rsa         (add ssh key to agent)
ssh-add -l                    (verify)

## Network Interface and Settings

ip addr     
ip link show

ip link set <interface> up 
ip link set <interface> down

nmcli
nmtui

network configs sotred /etc/sysconfig/network-scripts/ifcfg-<interface>          (make sure to restart service)

Network troubleshooting  
ping 
traceroute 
netstat
ip 

Advanced network features:
bonding
teaming
bridging

## Manage files

cat 
less    (view one page)

#edit files with 
nano
vim
vi      (from Bill Joy cir. 1970s)


vim shortcuts
hjkl          (like cursor movements)
w             (word navigation)
:w            (:w filename will save the file you are working on)   
ZZ            (save files quickly)


4. Red Hat System Administration


























































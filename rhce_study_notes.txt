Title: RHCE Exam Notes
Date: 2-27-2025
Author: Sean Krajewski


## Table of Contents 
1. [Note to Reader](#overview)
2. [Resources](#stuff I used to study)
3. RHEL Basics (#a lot of this is RHCSA review)
4. Red Hat System Administration
5. Automating Linux Tasks



1. Note to Reader 

These are my personal study notes for the Red Hat Certified Engineer (RHCE) exam (EX294), continuing my practice of documenting notes on GitHub.

This is not an exhaustive guide, but rather a focused summary. The RHCE covers advanced networking, security, and automation, serving as an entry 
point into practical DevOps concepts. The exam consists of approximately 20 scenario-based questions, requiring a passing score of 210/300 (70%)—no 
multiple-choice questions.

From my experience and discussions with others, it's best to pursue the RHCE soon after the RHCSA. Proficiency in Ansible provides a 
significant advantage, as automation plays a major role in the exam.

Feel free to use these notes if they help. My primary study resource is Luca Berton’s book (see below).



2. Resources

https://www.redhat.com/en/services/certification/rhce
Luca Berton's Mastering the Red Hat Certified Engineer (RHCE) Exam

#Ansible how-to video series
https://www.youtube.com/watch?v=VANub3AhZpI&list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70&index=6


#Theses are practice questions on YouTube
https://www.youtube.com/watch?v=8Ls56awCJ_U&list=PLYB6dfdhWDePZf4fd4YgGGtSX_vHKv5vz
https://www.youtube.com/watch?v=0HNuR1a6-9M&list=PLL_setXLS0tiYMipvQI4oUGkJwhOhn42J
https://www.youtube.com/watch?v=vVLYuXmm06o&list=PLH9uuziPJn3QAnkYJ2Mj9Kxwoi-OpMtpf

#After you've taken a look at the above resources for a few weeks make a free account at O'Reilly.
#You will have 10-days but you can go throught the RHCE course from Sander van Vugt (8hrs)
#This was the best resource overrall


3. RHEL Basics

lifecycle of RHEL:  full support(5yr), maintenance support (5yr), extended life cycle support (ELS) add-on

Benefits of RHEL:
CPU architectures supported: 86x, ARM, IBM Power, IBM Z, IBM LinuxONE
RHEL includes Ansible automation tech
Red Hat insights provides analytics/remediation  = suppose to maximize uptime and avoid emergencies
Migration tools + RHEL image builder for cloud deployments
live kernel patching, security profiles, trusted software supply chain, automate security processes
performance monitoring/analysis tools
Convert2RHEl tool streamlines the migration process from RPM compatible linux distros like Rocky Linux, AlmaLinux OS, etc
various use cases: edge computing, hybrid cloud deployments, SAP workloads, SQL server hosting, applicaiton development, and high-performance computing (HPC)
Collaborations with cloud providers like GPC, AWS, Azure, Oracle


RHEL installer is called Anaconda  (same for CentOS and Fedora)




### subscription manager

subscription-manager register --username=<name> --password=<pw>

#see available subscriptions
suscription-manager list --available | less

#attach subscription 
subscription-manager attach --auto

#unregister the system
subscription-manager unregister


###shutting down commands

you generally want to limit shutdowns/downtime.  instead try restarting (covered in next section)

#shutdown and restart now 
shutdown -r now

#schedule shutdown at 23:00
shutdown --halt 23:00

#shutdown in 2 minutes
shutdown --halt +2

#shutdown in 2 minutes with a message broadcasted to users logged in
shudown --halt +2 "Urgent. Shudown in TWO minutes."

#cancel shutdown  (this will also be broadcasted to users logged in)
shutdown -c


### Reboot

limitation of systemctl is its inability to do delayed restarts (either now or never)

#restart a service
systemctl restart <service name>

#restart the system (same as effect as shutdown -r now)
systemctl reboot


### Suspending and hibernating

suspension
+ system shuts down (no-power mode)
+ contents of memory are moved to the swap location. on powerup, system reloads from swap
+ boot loader is configured to boot directly to the current kernel

systemctl suspend


hibernation
+ the ystem remains powered on but in a low-power state
+ applications are stopped
+ system state is moved to ram

systemctl hibernate

#combines both
systemctl hybrid-sleep


#Graphical user interface

default gui in RHEL is the GNOME environment.


#Bash scripts 

best used for repetitive or complex tasks (helps reduce human error and improve user experience)

#!/bin/Bash
#Usage: Hello World Bash Shell scripts
#Author: Sean Krajewski
echo "Hello World!"


#Man command

best used in air-gapped environments or exams!

#lists all man pages with descriptions
man -k 


#short description for specific command
man -f <command>

#search all man pages using regulare experessions and open matching ones
man --regex <keyword>

#narrow search to specific section 
man -s <section ID> <keyword>

#searching all man pages for a keyword and out location
man -wK <keyword>



## Red Hat support tool

redhat-support-tool is a utility that provides text based interface for searching inside the knowledge base articles
and filing support cases on the customer portal via command LinuxONE

search option = search between red hat articles
opencase option = open a support cases
addattachment option = attach diagnostic sys info (sosreport)
listcases = list the supported cases of our red hat customer account

# red hat insights

software as service (SaaS) which identifies/remdiates threats, performance, and stability on systems or infrastructures 
running red hat products.
you have to opt-in and requires an agent running.
when a security threat is identified a solution (step-by-step instructions) to remediate the porblem is provided or an ansible playbook
insights is already installed on RedHat +8 systems

to start it use 
you can then audit systems for compliance using the penSCAP policy framework project e.g. auditing for PCI DSS policy


insights-client --register

#users and groups

Linux is a multi-user system. gotta know how to enforce security and access control on users/groups

use su or sudo for switching to users
you may have to use a password for the user 

su mike   (swiches user to mike)

sudo is used for privilege escalation and is only allowed if the user is in a special group i.e. wheel
you can also add the user directly in the file visudo e.g. mike ALL=(ALL) ALL
if you edit the visudo file or add user to the wheel group and run whoami it will show up as them being 'root'

#storage

/ directory is the root. everything falls under it.

/boot  =  files for system bootstrap
/etc   =  config files
/dev   =  files to access hardware
/home  =  home dirs of users (has their personal data)
/root  =  home dir for root
/usr   =  installed software, shared libraries, includes some key files
/usr/bin  = user commands
/usr/sbin = system admin commands
/usr/local = locally customized software
/var   =  dynamically chaning data i.e. log files, cache dirs, databases, printer spooled documents, website contents
/run   =  runtime data for processes started since the lat boot.  includes process id files and lock files (recreated at boot)
/tmp   =  world writable space for temporary files. files not changed in 10 days are auto deleted!!! (/var/tmp is 30 days!!)


#partitioning

crucial part of sys admin
division of hard drives into logical storage units as partitions enables space to be allocated functions to certain areas
e.g. memory swap space
Master Boot Record (MBR) partitioning scheme used since 1982, process of how to partition on BIOS firmware systems (it supported 4 partitions/disk)
GUID partition table (GPT) has succeeded MBR. it offers 128 partitions per disk, larger disk sizes, redundancy with primary/secondary GPTs
GPT is the standard now for Unified Extensible Firmware Interface (UEFI) firmware systems

parted /dev/sda     (launches the GNU parted interactive mode for managing partitions)

example:

[root@localhost ~]# parted /dev/sda
GNU Parted 3.5
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sda: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  1075MB  1074MB  primary  xfs          boot
 2      1075MB  21.5GB  20.4GB  primary               lvm


the print command displays the partition table

you may have used fdisk to partition the hard drive.  fdisk works primarily with MBR and is meant for older or smaller systems.
fdisk is good for simple partitioning
gdisk can be used but you have to install it.  gdisk works better for GPT
parted works better for larger disk >2TB; it's better for modern systems, scripting, automated partitioning

XFS and .ext4 are commonly used for file systems types

#apply a file system to a partition after it's created
mkfs.xfs /dev/sdb1

#manually mounting sda1 to mount point /mnt/data
mount /dev/sda1 /mnt/data

you can also use the UUID (universally unique identifier)


storage devices will be identified by the connection interface via:
/dev/sda  = SCSI
/dev/hda  = IDE 
/dev/nvme0 = NVMe 

#to unmount  (can only do it if its not in use)
umount /mnt/data

#provides a list of resources active for each file system, adding in resolving unmounting challenges
lsof


#Persistent mount
/etc/fstab   (critical for persistent mounting)


best practice is to use UUIDs for devices to vaide potential issues with changing block device identifiers

#reload the systemd after making changes to /etc/fstab
systemctl daemon-reload

#check if there are errors with your /etc/fstab; can also use mount -a and if it fails something is wrong
findmnt --verify

##Installing software

use dnf to install packages.  Yum was and can still be used but dnf is an improved version of yum.
dnf installs not just the software you want but any dependencies that are needed as well.

#list installed packages
dnf list

#search packages matching keywords
dnf search <keyword>

#update all installed packages + kernel updates (essential for maintaining system security)
dnf update

it's a good practice to reboot after updating the kernel


#update only the httpd package
dnf update httpd

#log file of dnf packages installed and removed 
/var/log/dnf.rpm.log

#shows the history of the dnf environments
dnf history

#undo an action from the history just use the ID from from the dnf history list
dnf history <ID>

##web console
web user interface (WUI) introduced via cockpit; it allows admins to connect and manage a system accessing the web interface at a specified address
cockpit service  must be configured to run on the system in order to connect

systemctl status cockpit.socket         (verify status of the service)
systemctl start cockpit                 (starts the cockpit service)
semanage port -a -t websm_port_t -p tcp 9090
firewall-cmd --permanent --service cockpit --add-port=9090/tcp

##SSH network login
ssh user@ipaddress
ssh user@hostname

#using a public key  (key has to have 0600 permission!!)
ssh -i mykey.pem user@ipaddress

#exiting ssh
ctrl + d 

Remote host fingerprint is stored in ~/.ssh/known_hosts
you can generate keys with the following command

ssh-keygen
-t   = type of algo
-b   = number of Bits  
-f   = file name

default configs are RSA 2048 Benefits
For FIPS 186-2 DSA keys must be exactly 1024bits

public key is saved in ~/.ssh/id_rsa.pub 
private key is saved in ~/.ssh/id_rsa         (SHA 256)

#copies pbulic key of the ssh public keyy to the remote system
ssh-copy-id -i .ssh/id_rsa.pub  user@ipaddress

ssh-copy-id command copies the public key and puts it in the ~/.ssh/authorized_keys dir

# you can use ssh-agent to cache the ssh private key in memory at the beginning or during our seesion to have passwordless authentication

eval "$(ssh-agent -s)"        (start the ssh-agent; will output agent pid)
ssh-add ~/.ssh/id_rsa         (add ssh key to agent)
ssh-add -l                    (verify)

## Network Interface and Settings

ip addr     
ip link show

ip link set <interface> up 
ip link set <interface> down

nmcli
nmtui

network configs sotred /etc/sysconfig/network-scripts/ifcfg-<interface>          (make sure to restart service)

Network troubleshooting  
ping 
traceroute 
netstat
ip 

Advanced network features:
bonding
teaming
bridging

## Manage files

cat 
less    (view one page)

#edit files with 
nano
vim
vi      (from Bill Joy cir. 1970s)


vim shortcuts
hjkl          (like cursor movements)
w             (word navigation)
:w            (:w filename will save the file you are working on)   
ZZ            (save files quickly)


4. Red Hat System Administration


## Network Settings

network settings are stored in multiple different files
the network configuration addresses are IPv4, IPv6, or both (called dual stack)


#Hostname
each system is identified by a 'hostname'

commands:
hostname       (shows the host name)
hostnamectl set-hostname <name>       (will set the hostname to whatever you choose)
systemctl restart systemd-hostname    (this is if you changed the config file in /etc/hostname you need to restart the service)


file location:
/etc/hostname
/etc/sysconfig/network     (RHEL 6 and earlier)



#Name Resolution

stub resolver converts the hostname to an ip address and reverses it in the system!

files:
/etc/nsswitch.conf              (determines the 'order' of the lookup; it'll say where the system should check for hostname resolution i.e. /etc/hosts)
/etc/hosts                      (contains static host resolution i.e. local DNS lookup file that maps IP address to hostnames )

commands:
getent hosts google.com        (will test static host resolution)


if getent fails the system trys to contact the DNS defined in the /etc/resolv.conf file

best practice is to mix ipv4 and an ipv6 DNS resolver to gurantee the systems high availability for dual-stack systems


#Network interfaces


Commands:
nmcli con                        (shows all network connections)
nmcli con show --active          (show all active network connections)
nmcli con down <id>              (bring down a connection)
nmcli con up <id>                (bring up connection)
nmcli con mod <id>
nmcli con mod <id> ipv4.dns 192.168.1.254      (modifies the DNS server of <id>)
systemctl restart NetworkManager               (makes the changes take affect for DNS)

 files:
 /etc/sysconfig                           (network configurations)
 /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1    (contains network configuration file; this is deprecated)
 /etc/NetworkManager/system-connections/                    (inside here will be network configuration files; use this on RHEL9+!!!)

remember if you edit the configuration files you nee to reload the connection
nmcli con reload                             (reload after editing config files!!!)


gather network information using:
ip 
ping 
tracepath 
ss

ip link show                                    (identify network interfaces i.e. software/hardware component that allow a device to connect/communicate over a network)
#loopback is a special virtual interface; let's the computer talk to itself and is used for testing/troubleshooting e.g. ping 127.0.0.1 (loopback address)

ip addr
ip a                                            (displays ip addresses)
ip addr show ens3                               (display ip address for ens3)



ip -s link                                      (display performance statistics like received/transmitted packets, errors, drops)


ping -c3 <ip>                                   (checks connectivity of <ip>; sends 3 packets)
ping6 <ip>                                  (similar just works for Ipv6)


ip route                                        (displays routing table)
ip -6 route                                     (display routing table for ipv6)


tracepath                                       (tracing route taken by traffic)


ss                                               (ss replaces netstat command tool and displays socket statistics)
ss -ta                                           (displays all TCP sockets)




##Date and time

timedatectl                               (verify current time settings)
timedateclt list-timezones                (list available time zones)
timedatectl set-timezone Europe/Paris     (set correct time zone)
timedatectl set-ntp true                  (configure ntp synch)
timedatectl set-timezone UTC              (set the timezone UTC)
timedatectl set-time YYYY-MM-DD hh:mm:ss  (set the specific time manually)




chronyd is set to use NTP pool project servers by default

file:
/etc/chrony.conf                           (add the ntp server if you need to pool <ip> iburst)

remember to restart the service after editing chrony.conf

systemctl restart chronyd

chronyc sources -v                         (verify NTP synchronization)

in the past they used NTPd but for now just use chronyd as it's more recent 


#schedule future tasks

automating maintenance tasks ensure system reliability
crond can help solve this with rsync command.
anacron is good for systems not running continously.

files:
/etc/crontab
/etc/cron.d (preferred way)
/etc/cron.hourly
/etc/cron.daily 
/etc/cron.weekly 
/etc/cron.monthly 

a scheduled task is called a cron job

0 */6 * * * /usr/bin/clear_temp_files.sh        (every 6hrs a script cleans temp files out)


you can also use special strings for cron such as

@reboot
@yearly
@monthly
@weekly
@daily
@hourly

for example:
@reboot /path/to/startup_script.sh       (this will run at every system reboot)

there are also system wide cron jobs that you can set in the /etc/crontab file.  here you need to specify a user.

logging cron jobs by default logs are in /var/log/cron
tail -f /var/log/cron      to check if the jobs are running as expected.


Automating a backup (example)

vim /usr/local/bin/backup.sh
#!/bin/Bash
tar -czf /backup/$(date +\%F).tar.gz /important/data
chmod +x /usr/local/bin/backup.sh
crontab -e                                           (create cron job to run daily at 1 AM)
0 1 * * * /usr/local/bin/backup.sh
crontab -l                                           (verify cron job)


Anacron
use for systems not on all the time i.e. hibernating or turned off.


files:
/etc/anacrontab


##systemd timer

systemd timer unit enables timer-based activation of other systemd units
It acts as a replacement for cron jobs but offers more flexibility, logging, and integration with other systemd services.
on RHCSA exam you had to start a service from a container and make it persistent.  That's kind of what we are doing here.



Key Differences from Cron
Feature	                       Cron	    Systemd Timer
Executes commands directly   	✅	    ❌ (calls a service instead)
Logs execution & errors	        ❌	    ✅ (via journalctl)
Tracks missed runs after reboot	❌	    ✅ (Persistent=true)
Flexible scheduling	           Limited    ✅ (OnCalendar, OnBootSec, OnUnitActiveSec)
Dependency management	        ❌	    ✅ (can wait for network, other services, etc.)


commands:
dnf install sysstat -y                     (sysstat is a service you might want to schedule to run every 10 minutes to get system statistic data)
systemctl enable --now sysstat


files:
/usr/lib/systmd/system/sysstat-collect           (location for the sysstat configuration)

time file collects system statistics every 10 mins for sysstat service
after you edit systemd timer you need to run systemctl daemon-reload

##Manage local users and groups

3 types of users
superuser i.e. root account with UID 0; this has unrestricted access to the entire system
system users UID 1-999: used by background processes; 1-200 for system processes and 201-999 for other software
regular users UID 1000+: most users fall into this account and will have limited access

commands:
id                               (tells who is logged in and gives info)
usermod
useradd
userdel
useradd -m sean                  (add user sean with home directory)
useradd -m -d /opt/devops/sean   (add user sean but specify the location of the home directory)
useradd -u 2500 sean             (add user sean with UID 2500)
useradd -g devops sean                   (create user sean and add them to devops as primary group)
useradd -g devops -G wheel,cloud sean    (create user sean and add him to primary group devops and secondary groups wheel, cloud)
useradd -s /usr/bin/zsh sean             (create user sean and set his shell to Z shell)
useradd -s /sbin/nologin sean            (create user sean but don't give him login access)
useradd -c "Sr. DevOps" sean             (create user sean and add a comment to his file)
useradd -e 2025-12-31 sean               (sean won't be able to login after 12-31-2025)
useradd -r system_user                   (creates a system user)
useradd -D                               (changing the default useradd values)
usermod -L sean                          (lock the account; i.e. no login)
usermod -U sean                          (unlocks the account)
passwd sean
userdel sean
userdel -r sean                          (deletes the user and their home dir)


files:
/etc/passwd            (user details; password isn't visible)
/etc/shadow            (encrypted passwd stored here)

## Shell startup 
$HOME = contian the current user home dir
$PATH = path used to search for executable commands

files:
/etc/profile          (bash shell user variables are defined here)
/etc/bashrc

you can edit and change these files .bashrc and .bash_profile
use source to reload after making changes

source ~/.bash_profile 


##password
/etc/shadow is only accessible by root
passwords are stored encrypted
RHEL+8 uses SHA-512 for hashing passwords.  they are also salted
$6$ = SHA-512
$5$ = SHA-256
$1$ = MD5

chage -l sean                        (list pw aging for sean)
chage -m 0 -M 90 -W 7 -I 14 sean     (min days 0, max 90, warn 7 days, 14 days of inactivity)
chage -d 0 sean                      (force user to update their password on next login)


##superuser
often sys admin task require a superuser.  allows for execution of elevated commands

/etc/sudoers 
%wheel ALL=(ALL)    ALL             (all users in wheel group have superuser privileges)
%whell ALL=(ALL)    NOPASSWD: ALL   (does the same just doesn't ask for password request)

#groups
system groups GID 0-999
custom groups GID 1000+


/etc/group

groupadd
groupmod
groupdel
groups sean                         (shows groups of user sean)
usermod -aG group1,group2 sean      (add sean to group1 and group2 as secondary)
gpasswd -d sean group1              (remove sean from group1)




##File access control

chmod = change mode; used for changing permissions; numeric and symbolic modifies

symbolic
chmod go-rw file1                   (group,others remove read write from file1)
chmod a+x file2                     (add execute permissiong for all on file2)

numeric 
4 = read
2 = write
1 = execute

chmod 644 samplefile                (user has read,write;group has read only;others have read only)
chmod 750 file3                     (user has full access;group can read, execute; others have no access)


chown = ownership of file/dir
chown devops file4                  (user devops owns file4)
chown :admins file4                 (file4 is part of the admin group)
chown visitor:guests file 5         (file5 owned by visitor and is part of the guests group)


special permissions
SUID   4     (allows any user to execute the file as owner)
SGID   2     (allows new dir/files to be apart of the same group)
sticky 1     (users can only remove files own by them and not others in shared dir)

#Access control list
setfacl
getfacl


#Linux processes

linux process scheduler is embedded in the kernel and uses time-slicing or multitasking to manage the exectuion of numerous processes on a single correct
that's why we have nice values for priority levels

nice and renice commands are key in influencing the priority of processes
regular users can increase nice to 19 but only root can increase it to -20 (highest priority)

tools like top and ps help here as well.

##Load average

it's the number of pending system resource requesting; helps to guage sys performance/health
kernel calculates it every 5 seconds on the number of prcesses in runnable and uninterruptible states
so load avg reflects the number of processes currently witing for requests to complete
Load averages are used to measure the system's workload over time
They provide a rolling average of the number of processes that are either running or waiting for CPU time.


[root@node3 ~]# uptime
 13:02:26 up  1:38,  2 users,  load average: 0.00, 0.00, 0.00

[root@node3 ~]# nproc
1

I have 1 cpu and my load averages are all 0.00 on the 1,5, and 15min averages.  That means I'm underutilzing the system.
if it was closer to 1 meaning you take the # of cpu and divide it by the load average it would be fully utilized.

top keystrokes
h  = help
l,t, m  = toggle load, threads, memory headers
1 = shows individual cpus
s = change the refresh rate 
k = kill process
r = renice process
shift+m = reorder by memory
shift+p = reorder by cpu Usage
q = quit  


##process signals

understanding signals = signals are software interrupts sent to processes to communicate various events, like errors, external events, or explicit commands
it's like the internal comms of your linux os.

SIGTERM: Terminate the process (gracefully).
SIGKILL: Forcefully terminate the process (cannot be caught or ignored).
SIGINT: Interrupt the process (e.g., pressing Ctrl+C in a terminal).
SIGSTOP: Stop (pause) the process.
SIGCONT: Resume a paused process.
SIGSEGV: Segmentation fault (caused by accessing invalid memory).

pstree comand can help visualize process relationships between parent-child processes

process management commands
kill
killall
pkill
pgrep
pstree


## services and daemons

.service = system services 
.socket = socket units handle inter-process communication
.path  =  delay service activation until specific file system changes

commands:
systemctl is-enabled sshd                       (checks if sshd is enabled)
systemctl is-active sshd
systemctl is-failed sshd
systemctl enable --now sshd.service             (enable and start sshd service)
systemctl makes                                 (prevents accidental start of conflicting services by creating symbolic links)

Grand unified bootloader (GRUB)

log files
/var/log        directory with all the logs
rsyslog and systemd-journald    are services taht hanlde the syslog messages in modern RHEL.  Systemd-journld collects event messages wile rsyslog records/writes them or sends them via network messages

files:
/var/log/messages               general purpose messages
/var/log/secure                 security/authentication messages
/var/log/maillog                mail server events
/var/log/cron                   scheduled job execution events
/var/log/boot.log               system start events
/var/log/audit/audit.log        selinux audit event log
/var/log/dnf.rpm.log            all install/remove DNF transactions log


/etc/pki                        stores digital certificates of subscriptions
dnf module                      install specific versions of software via modules


Logical volume manager
vgdisplay                           displayy vg info
lvcreate -n mylv -L 10G myvg        create lv
mkfs.ext4 /dev/myvg/mylv            format lv
mkdir -p /mnt/mylv                  make mount point
mount /dev/myvg/mylv /mnt/mylv      mount lv to mount point
lvextend -L +5G /dev/myvg/mylv      extend the lv
resize2fs /dev/myvg/mylv            resize the filesystem
lvextned -r -L +5G /dev/myvg/mylv   this will resize the lv and filesystem
lvreduce -r -L -2G /dev/myvg/mylv   reduces lv size and filesystem by 2G
umount /mnt/mylv                    unmounts
lvremove /dev/myvg/mylv             removes lv
vgs                                 check free space

##RAID

dnf install mdadm -y              install the tool for raid


RAID 1 (mirroring)
mdadm --create --verbose /dev/md0   --level=1 --raid-devices=2 /dev/sdb1/ /dev/sdc1             (creates a RAID 1 array named md0 with 2 disks sdb1 and sdc1)

RAID 0 (striping)
mdadm --create --verbose /dev/md1   --level=0   --raid-devices=2    /dev/sdb1 /dev/sdc1

RAID 5 (striping with parity)
mdadm --create --verbose /dev/md2 --level=5 --raid-devices=3 /dev/sdb1 /dev/sdc1 /dev/sdd1

RAID 10 (mirrored stripes)
mdadm --create --verbose /dev/md3 --level=10 --raid-devices=4 /dev/sdb1 /dev/sdc1 /dev/sdd1 /dev/sde1

diplay RAID info
cat /proc/mdstat
mdadm --detail /dev/md0              display monitoring statu of Raid arrays
mdadm --stop /dev/md0                stops raid array
mdadm --remove /dev/md0              removes raid array



#Hard/soft links

ln original.txt hard.txt                  creates hard link of original.txt
ln -s soft.txt original.txt               creates soft link of original.txt 

if the orginal.txt is deleted for a soft link it becomes a dangling link and should be removed.

#SMB storage
network attached storage (NAS)
server message block (SMB)
network file system (NFS)


commands:

dnf install cifs-utils -y 
mkdir /mnt smbshare
mount.cifs /serverpath /mnt/smbshare -o username=nas_username,password=nas_password

echo "username=nas_username" > ~/.smbcredentials
echo "password=nas_password" > ~/.smbcredentials
chmod 600 ~/.smbcredentials
mount.cifs /serverpath /mnt/smbshare -o credntials=~/.smbcredentials

you can now access the SMB share by going to /mnt/smbshare

#NFS storage

mkdir -p /mnt/nfs 
mount -t nfs -o rw,sync server:/share /mnt/nfs              temp mounting using nfs

/etc/fstab                                                  add entry here to make it persistent

umount /mnt/nfs                                            remove the mount



#automounting

dnf install autofs -y

/etc/auto.master.d/demo.autofs
/- /etc/auto.demo

/etc/auto.demo
/share -rw,sync server:/nfs/share

systemctl enable --now autofs


direct maps
/- /etc/auto.direct
/mnt/docs -rw,sync server:/nfs/docs

indirect maps
* -rw,sync server:nfs/&





5. Automating Linux Tasks



ansible is primarily declarative 
bash is imperative

controller node = where ansible is installed and run; it orchestrates the automation tasks on targets nodes
ansible can only be installed on linux based systems

managed nodes = these are the nodes we want to manage with ansible; they can be linux, macOS, windows
ansible doesn't require any agent software be installed on the target nodes; it'll connect using ssh or winRM

linux systems are easy to manage with ansible because they natively use ssh via Python Paramiko library

ansible modules = small programs sends over to the manage nodes
task = each task in a playbook calls a list of modules.  when a playbook is run ansible copies these modules to the target nodes, executes them and then deletes them after completion
playbooks = core component of ansible automation.  written in YAML and define tasks to be executed in a sequenced order on target/manage nodes
a playbook can contain variables, conditions, loops and more
inventory = lists all the target nodes; it can group nodes useful for targeting specific machines or groups for particular tasks
inventory can be simple static file or a dynamic source that pulls in node information from cloud providers or other services

task > module > playbook  | inventory file


#installing ansible

dnf install ansible-core -y                                     install ansible 
/etc/ansible/hosts                                              define the hosts and groups of hosts here

ansible ad hoc commands are a way to execute simple tasks as needed without writing a playbook
example:
ansible localhost -m ping                                       test connectivity to localhost 
ansible localhost -m setup                                      gathers facts about the local host 
ansible web -m command -a "uptime"                              gets the uptime on the group labeled web

inventories can be ini or yaml files
by default ansible will use /etc/ansible/hosts but you can make a inventory file and just call it in your playbook

[web]
webserver1.example.com


this would be a static version but you can use dynamic inventory (good for when ip addresses are changing frequently)
inventory variables: we can assign variables to hosts or groups within the inventory file for use in playbooks

[db:vars]
ntp_server=pool.ntp.org 
proxy=proxy.example.com

aliases = you can use an alias in playbooks instead of actual hostnames
inventory parameters examples:
ansible_ssh_user
ansible_ssh_pass

best practices
keep it organized - keep it like the logical and netowrk layout
use version control = track changes via a vcs (version control system)
integrate with configuration management database (CMDB) or cloud providers for real time updates
utilizing the inventory when running ad hoc commands or playbooks; can specify the inventory file with -i /pathtoinventory
group hosts by similar fucntions/purpose to reduce complexity

modules are each designed to handle a specific task i.e. the file module cna change file attributes
yum module can manage packages using Yum
git module can manage git repos 

idempotency = modules will only make changes if those changes are necessary to achieve a desired state. so even if the playbook is run multiple times it will give you the same resolution
it won't change the state if it's not necessary

most modules are written in python; can also be written in Perl, Ruby, Bash.
extensibility = designed to be easily extendable with custom modules
integration - modules can integrate with variou services and tools such as AWS, Azure, GCP



Most common modules used in playbooks
    - copy
    - fetch
    - file
    - lineinfile
    
    software package modules
    - package
    - yum/apt/dnf

    system modules
    - user
    - service

    Networking tools modules
    - get_url
    - uri


Ansible Core = The basic CLI tools
Ansible Galaxy = repo for downloading/sharing Ansible Roles. A package manager for Ansible Roles
Ansible Navigator = CLI tool to help run, debug, manage Ansible playbooks
AWX/Ansible Tower = web-based UI for managing Ansible automation

Playbook = yaml file that lists a set of automation instructions
Task = a single action inside a playbook
Module = a built-in or custom script that does a task
Role = A structured way to organize multiple playbooks, tasks, variables, and handlers
Inventory = a file listing target servers
Handlers = special tasks triggered by changes (e.g. restart a service)
Variables = Store dynamic values (e.g. {{ ansible_hostname}} )
Templates = use Jinja2 for dynamic file generations


Key features of Ansible playbooks:
 - human-readable format
 - task management
 - variable integration
 - idempotency
 - error handling
 

Host Groups Usage:

Fucntional host groups
    - web
    - lamp
Regional host groups
    - Europe
    - Africa
Staging host groups
    - Test
    - development 
    - production 



ansible-playbook --syntax-check vsftpd.yml     #check syntax of playbook


















 Miscellanous

 ansible all -m yum_repository -a 'name=EX294_STREM
 description="EX294 stream software"
 baseurl=http://content.example.com/rhel8.0/x86_64/dvd/AppStream/
 enabled=yes gpgcheck = yes
 gpgkey=http://content.example.com/rhel8.0/x86_64/dvd/RPM-GPG-KEY-redhat-release'

 chmod +x adhoc.sh
 ./adhoc.sh





































